
public class firstSorting {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

/* 정렬 
 * *** 간단하지만 효율적이지 않은 3가지 정렬 
 * selection sort: 배열 중, 제일 큰 값을 뽑아서 맨 마지막에 두고 하나씩 비교의 상황을 줄여가는 방법 
 * bubble sort: 처음부터 값을 비교해서 제일 큰 값을 마지막으로 몰아가는 작업. 그물로 고기를 몰아오는 작업! 
 * insertion sort: 처음의 두 값을 비교 후, 뒤에오는 값들을 비교해서 차례로 순서에 맞게 끼워넣는 방법 
 * - item to insert: 4 
 * - 방법 1) 앞에서부터 비교: 4보다 작은 데이터는 비교후 패스, 4보다 큰 데이터는 뒤로 한칸씩 이동 
 * --> 결국 모든 데이터를 한번씩 비교하는 작업 
 * - 방법 2) 뒤에서부터 비교: 4보다 큰 값들은 비교 후 한칸씩 뒤로 이동, 4보다 작은 값은 볼 필요도 없음 
 * - 1. 삽입할 숫자 4를 temp 변수에 저장하여 보관한다. 
 * - 2. 이 temp 값과 정렬된 수들을 비교한다. 
 * - 3. if temp < 정렬된 수: 한칸씩 뒤로 이동 
 * - 4. if temp > 정렬된 수: 해당 수 바로 뒤에 4를 대입한다. 
 * - 최악의 경우: n(n-1)/2 
 * - 최선의 경우: n-1
 * - insertion sort는 다른 두 정렬과 비교하여 시간 복잡도가 낮은 편이다. 
 * 
 * *** 효율적인 정렬 3가지 : merge sort, quick sort, heap sort
 * 분할 정복법: Divide and Conquer
 * 분할 - 해결하고자 하는 문제를 작은 크기의 "동일한" 문제들로 분할 
 * 정복- 작은 문제를 순차적으로 해결 
 * 합병- 작은 문제의 해를 합해 원래 큰 문제에 대한 해를 구함 
 * 
 * */